% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SMC.R
\name{smcSampler}
\alias{smcSampler}
\title{SMC sampler}
\usage{
smcSampler(
  bayesianSetup,
  initialParticles = 1000,
  iterations = 10,
  resampling = T,
  resamplingSteps = 2,
  lastMutateSteps = 5,
  proposal = NULL,
  exponents = NULL,
  adaptive = T,
  proposalScale = 0.5,
  x = 3.11,
  m = 7e-08,
  sampling = "multinomial",
  ess.limit = NULL,
  ess.factor = 0.95,
  lastResample = 1,
  pars.lower = NULL,
  pars.upper = NULL,
  mutate.method = "Metropolis",
  b = 1e-04,
  diagnostics = NULL,
  reference = NULL
)
}
\arguments{
\item{bayesianSetup}{either an object of class bayesianSetup created by \code{\link{createBayesianSetup}} (recommended), or a log target function}

\item{initialParticles}{initial particles - either a draw from the prior, provided as a matrix with the single parameters as columns and each row being one particle (parameter vector), or a numeric value with the number of desired particles. In this case, the sampling option must be provided in the prior of the BayesianSetup.}

\item{iterations}{number of iterations}

\item{resampling}{if new particles should be created at each iteration}

\item{resamplingSteps}{how many resampling (MCMC) steps between the SMC iterations}

\item{lastMutateSteps}{how many resampling (MCMC) steps after the SMC iterations}

\item{proposal}{optional proposal class}

\item{exponents}{series of exponents to build the intermediate distributions}

\item{adaptive}{should the covariance of the proposal be adapted during sampling}

\item{proposalScale}{scaling factor for the proposal generation. Can be adapted if there is too much / too little rejection}

\item{x}{Parameter to generate the exponential sequence for building intermediary distributions. Default value from Jeremiah et al. (2012)}

\item{m}{Parameter to generate the exponential sequence for building intermediary distributions. Default value from Jeremiah et al. (2012)}

\item{sampling}{Which algorithm to use for particle (re)sampling. Options are "multinomial" (default), "residual" and "systematic"}

\item{ess.limit}{Threshold value of effective sample size below which resampling is done. By default, the value is set to half the number of particles. To resample at each step, use a value >= the number of particles.}

\item{ess.factor}{}

\item{lastResample}{Iteration (starting from the end) at which particle resampling is forced. To deactivate this, set to a value < 0}

\item{pars.lower}{Optional: vector contaiing the mimimum values of calibration parameters. Used to initialize the proposal function}

\item{pars.upper}{Optional: vector contaiing the maximum values of calibration parameters. Used to initialize the proposal function}

\item{mutate.method}{MCMC method for the resampling. Either "Metropolis" or "DE"}

\item{b}{parameter for snooker update in DE}

\item{diagnostics}{an optional function with diagnostics that are calculated on the particles during each SMC iteration}
}
\description{
Sequential Monte Carlo Sampler
}
\details{
The sampler can be used for rejection sampling as well as for sequential Monte Carlo. For the former case set the iterations to one.
}
\note{
The SMC currently assumes that the initial particle is sampled from the prior. If a better initial estimate of the posterior distribution is available, this the sampler should be modified to include this. Currently, however, this is not included in the code, so the appropriate adjustments have to be done by hand.
}
\examples{
# creating a simple test BayesianSetup
bayesianSetup <- createBayesianSetup(likelihood = generateTestDensityMultiNormal(), 
                                     lower = rep(-10, 3),
                                     upper = rep(10, 3), parallel = "external")

# to directly call the smcSampler, use 
SMCout <- smcSampler(bayesianSetup, initialParticles = 100, iterations = 3)

# plotting results
marginalPlot(SMCout, type = "d", singlePanel = T)

# for options, see 
?smcSampler

# as for all MCMCs, you can also run the SMC via the general runMCMC function
SMCout<-runMCMC(bayesianSetup, sampler = "SMC", 
                settings = list(nrChains =2, initialParticles = 100, iterations = 3))
plot(SMCout)

}
\author{
Florian Hartig, Matthias Speich
}
