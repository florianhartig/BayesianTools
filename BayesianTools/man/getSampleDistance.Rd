% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Distance.R
\name{getSampleDistance}
\alias{getSampleDistance}
\title{calculate distance between samples}
\usage{
getSampleDistance(sample1, sample2, type = "KL")
}
\arguments{
\item{sample1}{a matrix. If the distance function is not symmetric, this is assumed to be a sample from the target (reference) distribution}

\item{sample2}{a matrix. If the distance function is not symmetric, this is assumed to be a sample from the "other" distribution}

\item{type}{the distance function}
}
\description{
calculate distance between samples
}
\details{
Currently, the following distance functions are implemented

KL = Kullback-Leibler Divergence
BH = Bhattacharyya distance
D =  normalized Euclidean distance between mean and standard deviation of sample and target. Not symmetric. Target is sample 1. This was described in eq. 10 in Laloy, E., and J. A. Vrugt. 2012. High-dimensional posterior exploration of hydrologic models using multiple-try DREAM(ZS) and high-performance computing. Water Resour. Res. 48(1)
}
\examples{
library(mvtnorm)
library(BayesianTools)

sigma <- matrix(c(4,2,2,3), ncol=2)
X <- rmvnorm(n=2500, mean=c(1,2), sigma=sigma)
X = rbind(X,X)
Y <- rmvnorm(n=2500, mean=c(5,2), sigma=sigma)
Y = rbind(Y,X)

FNN::KL.dist(X, Y, k=10)

getSampleDistance(X,Y, type = "KL")
getSampleDistance(X,Y, type = "BH")
getSampleDistance(X,Y, type = "D")

# the distance functions are independent of the scale of the parameters, see e.g.

scale = 2
getSampleDistance(data.frame(rnorm(1000), rnorm(1000, sd = scale)), 
                  data.frame(rnorm(1000), rnorm(1000, mean = scale, sd = scale)), type = "BH")
getSampleDistance(data.frame(rnorm(1000), rnorm(1000, sd = scale)), 
                  data.frame(rnorm(1000), rnorm(1000, mean = scale, sd = scale)), type = "D")


# To get an idea about how the distance functions approach zero for a perfect sampler
# use the following code where we sample 2 distributions directly from their 
# rnorm function 

getD <- function(n){
  x1 = matrix(rnorm(n), ncol = 10)
  x2 = matrix(rnorm(n), ncol = 10)
  getSampleDistance(x1, x2, type = "D" )  
}

test = seq(1000, 30000, 1000)
plot(test, sapply(test, getD), ylim = c(0,0.4))
abline(h=0, col = "red")
}
